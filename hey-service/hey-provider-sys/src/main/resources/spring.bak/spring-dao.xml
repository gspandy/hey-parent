<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- dataSource 配置，开启了druid -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${druid.url}" />
		<property name="username" value="${druid.username}" />
		<property name="password" value="${druid.password}" />
		<property name="initialSize" value="${druid.initialSize}" />
		<property name="minIdle" value="${druid.minIdle}" />
		<property name="maxActive" value="${druid.maxActive}" />
		<property name="maxWait" value="${druid.maxWait}" />
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		<property name="filters" value="${druid.filters}" />
	</bean>

	<!-- dataSource -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> -->
	<!-- <property name="jndiName" value="java:comp/env/datastore" /> -->
	<!-- </bean> -->

	<!-- mybatis SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.heyframework.sys.**.mapper" />
		<property name="markerInterface" value="org.heyframework.common.persistence.mybatis.base.MyBatisBaseMapper" />
		<!-- <property name="sqlSessionFactory" ref="sqlSessionFactory" /> -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- 因为MapperScannerConfigurer实现了BeanDefinitionRegistryPostProcessor这个接口，所以它是在spring容器加载了bean的定义之后，在bean实例化之前执行的。 -->
		<!-- 但这个时候要是设置sqlSessionFactory，会导致一些类提前初始化，例如:dataSource，所以这个时候PropertyPlaceholderConfigurer还没来得及替换定义中的变量， -->
		<!-- 导致把表达式当作字符串复制了。 -->
		<!-- 但如果不设置sqlSessionFactory 属性的话，就必须要保证sessionFactory在spring中名称一定要是sqlSessionFactory ，否则就无法自动注入 -->
	</bean>

	<!-- transaction manager -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- transaction aop -->
	<aop:config>
		<!-- execution(return type | package | class | method) -->
		<aop:advisor pointcut="execution(* org.heyframework..service..*.*(..))" advice-ref="userTxAdvice" />
	</aop:config>
	<tx:advice id="userTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.RuntimeException" />
			<tx:method name="create*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.RuntimeException" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="query*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

	<!-- database -->
	<bean id="dataBaseFactoryBean" class="org.heyframework.common.persistence.mybatis.database.DataBaseFactoryBean">
		<property name="dataBase" value="org.heyframework.common.persistence.mybatis.database.OracleDataBase" />
	</bean>
</beans>